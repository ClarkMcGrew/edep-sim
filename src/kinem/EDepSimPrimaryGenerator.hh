#ifndef EDepSim_PrimaryGenerator_hh_Seen
#define EDepSim_PrimaryGenerator_hh_Seen

class G4Event;
#include <G4VPrimaryGenerator.hh>

namespace EDepSim {class VKinematicsGenerator;}
namespace EDepSim {class VCountGenerator;}
namespace EDepSim {class VPositionGenerator;}
namespace EDepSim {class VTimeGenerator;}

/// Generate one (or more) G4PrimaryVertex objects and add them to the
/// G4Event.  This is used by the EDepSim::UserPrimaryGeneratorAction to generate
/// particles which will be tracked by the G4 simulation.  This uses the
/// EDepSim::VKinematicsGenerator, ND20VCountGenerator, EDepSim::VPositionGenerator,
/// and EDepSim::VTimeGenerator classes to create the G4PrimaryVertexObjects.  The
/// control of the EDepSim::PrimaryGenerator object is through the
/// EDepSim::UserPrimaryGeneratorMessenger class.
namespace EDepSim {class PrimaryGenerator;}
class EDepSim::PrimaryGenerator: public G4VPrimaryGenerator {
public:
    PrimaryGenerator(EDepSim::VKinematicsGenerator* kine,
                          EDepSim::VCountGenerator* count,
                          EDepSim::VPositionGenerator* position,
                          EDepSim::VTimeGenerator* time);
    virtual ~PrimaryGenerator();

    /// A pure virtual method to generate the actual primary particles which
    /// must be implemented in each derived class.
    virtual void GeneratePrimaryVertex(G4Event* evt);
    
    /// Return the name of this generator.
    G4String GetName();
    
    /// Return the kinematics generator;
    const EDepSim::VKinematicsGenerator* GetKinematicsGenerator() const {
        return fKinematics;
    }

    /// Return the count generator.
    const EDepSim::VCountGenerator* GetCountGenerator() const {
        return fCount;
    }

    /// Return the position generator.
    const EDepSim::VPositionGenerator* GetPositionGenerator() const {
        return fPosition;
    }

    /// Return the time generator.
    const EDepSim::VTimeGenerator* GetTimeGenerator() const {
        return fTime;
    }

private:
    /// The kinematics generator that will return the primary particles being
    /// simulated by this generator.  The kinematics generator adds the
    /// primary vertex to the G4Event along with the primary particles that
    /// eminate from the vertex.  The generator is passed a 4-vector position
    /// which gives the position that EDepSim::VPrimaryGenerator would like an
    /// interaction generated for.  The kinematics generator can choose to
    /// ignore this information and create the vertex at any location, but it
    /// might be overriden by EDepSim::VPrimaryGenerator (depending on which
    /// EDepSim::VVertexGenerator is used).
    EDepSim::VKinematicsGenerator* fKinematics;

    /// The count generator determines the number of primary vertices that
    /// will be added to a G4Event.
    EDepSim::VCountGenerator* fCount;

    /// The position generator picks candidate positions for the primary
    /// vertices. The candidate vertices generated by the position generator
    /// are passed to the kinematics generator as an advisory position.  If
    /// the position generator returns true from
    /// EDepSim::VPositionGenerator::ForcePosition(), then the vertex from the
    /// kinematics generator will be overridden by the EDepSim::VPrimaryGenerator.
    EDepSim::VPositionGenerator* fPosition;

    /// The time generator picks candidate times for the primary vertices.
    /// The candidate times are passed to the kinematics generator as advisory
    /// times.  If the time generator returns true from
    /// EDepSim::VTimeGenerator::ForceTime(), then the vertex from the kinematics
    /// generator will be overridden by the EDepSim::VPrimaryGenerator.
    EDepSim::VTimeGenerator* fTime;
};
#endif
