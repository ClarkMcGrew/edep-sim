#ifndef EDepSim_SpillTimeFactory_hh_seen
#define EDepSim_SpillTimeFactory_hh_seen

#include "kinem/EDepSimVTimeFactory.hh"

/// A factory to create a time generator to distribute events according to the
/// spill structure.  The spill parameters should be set before the generator
/// is created.  The spill times are actually generated by an
/// EDepSim::SpillTimeGenerator object.
namespace EDepSim {class SpillTimeFactory;}
class EDepSim::SpillTimeFactory : public EDepSim::VTimeFactory {
public:
    SpillTimeFactory(EDepSim::UserPrimaryGeneratorMessenger* parent);
    virtual ~SpillTimeFactory();

    /// Return the spill time generator.  The spill parameters must be set
    /// before this is called.
    EDepSim::VTimeGenerator* GetGenerator();

    /// Set the spill time.  The spill time is the offset of start of the
    /// first bunch with respect to zero.  This is the time that the bunch
    /// will cross the center of the EDepSim:: hall.
    void SetSpillTime(double spillTime) {fSpillTime=spillTime;}
    
    /// Set the number of bunchs (and reset the bunch power) in a spill.
    void SetBunchCount(int bunchs);
    
    /// Set the bunch separation.  This is the time between the start of
    /// successive bunches.
    void SetBunchSeparation(double sep) {fBunchSeparation=sep;}
    
    /// Set the bunch length.  This is the length of a bunch, and determines
    /// the end of the bunch with respect to the start.  The start of the
    /// bunch is determined by the spill time, and the bunch separation.  The
    /// bunch is modeled as a Gaussian with a sigma set to the Bunch Length.
    void SetBunchLength(double length) {fBunchLength=length;}
    
    /// Set the power for a bunch.  The bunchs are numbered from ONE, and the
    /// nominal (default) power in a bunch is 1.0.
    void SetBunchPower(int bunch, double power);

    /// Handle messages from the UI processor.
    void SetNewValue(G4UIcommand*, G4String);

private:
    /// The start time of the spill.
    double fSpillTime;

    /// The bunch separation.
    double fBunchSeparation;
    
    /// The bunch length.
    double fBunchLength;

    /// The power in each bunch.
    std::vector<double> fBunchPower;

    G4UIcmdWithADoubleAndUnit* fSpillTimeCMD;
    G4UIcmdWithADoubleAndUnit* fBunchSepCMD;
    G4UIcmdWithADoubleAndUnit* fBunchLengthCMD;
    G4UIcmdWithAnInteger*      fBunchCountCMD;
    G4UIcommand*               fBunchPowerCMD;

};

#endif
