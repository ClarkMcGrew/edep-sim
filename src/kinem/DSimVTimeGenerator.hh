#ifndef DSimVTimeGenerator_hh_seen
#define DSimVTimeGenerator_hh_seen

#include <G4String.hh>
#include <G4LorentzVector.hh>

/// A base class used by ND20PrimaryGenerator to select candiate vertex times.
/// Classes derived from DSimVTimeGenerator are responsible for returning new
/// candidate times that are passed to DSimVKinematicsGenerator by the
/// DSimPrimaryGenerator object.  Each call to DSimVKinematicsGenerator will
/// create a new "unique" primary vertex; however, it may ignore the candidate
/// time.  The derived classes must override two (pure virtual)
/// DSimVTimeGenerator methods.  The DSimVTimeGenerator::GetTime() must
/// return the time which is used to fill the time component of a
/// G4LorentzVector.  It takes the candidate vertex position generated by the
/// DSimVPositionGenerator object so that it can correct for time of flight.
/// The DSimVTimeGenerator::ForceTime() method must return a boolean to flag
/// whether the DSimPrimaryGenerator should override the time selected by
/// DSimVKinematicsGenerator with the one returned by
/// DSimVTimeGenerator::GetTime().  The ForceTime method should generally
/// return true.
class DSimVTimeGenerator {
public:
    DSimVTimeGenerator(const G4String& name) : fName(name) {}
    virtual ~DSimVTimeGenerator() {}

    /// Return the time of the primary vertex.
    virtual double GetTime(const G4LorentzVector& vertex) = 0;

    /// Return true if this time should be forced for the primary vertex.
    virtual bool ForceTime() = 0;

    /// Return the name of the generator.
    G4String GetName() const {return fName;}

private:
    /// The name of the generator.
    G4String fName;
};
#endif
